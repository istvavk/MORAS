CHIP Mult{

    IN a[16], b[16];
    OUT out[16];

    PARTS:
        And16(a=a, b[0]=b[0], b[1]=b[0], b[2]=b[0], b[3]=b[0], b[4]=b[0], b[5]= b[0], b[6]=b[0], b[7]=b[0], b[8]=b[0], b[9]=b[0], b[10]=b[0], b[11]=b[0], b[12]=b[0], b[13]=b[0], b[14]=b[0], b[15]=b[0], out=o1);
        And16(a=a, b[0]=b[1], b[1]=b[1], b[2]=b[1], b[3]=b[1], b[4]=b[1], b[5]= b[1], b[6]=b[1], b[7]=b[1], b[8]=b[1], b[9]=b[1], b[10]=b[1], b[11]=b[1], b[12]=b[1], b[13]=b[1], b[14]=b[1], b[15]=b[1], out=o2);
        And16(a=a, b[0]=b[2], b[1]=b[2], b[2]=b[2], b[3]=b[2], b[4]=b[2], b[5]= b[2], b[6]=b[2], b[7]=b[2], b[8]=b[2], b[9]=b[2], b[10]=b[2], b[11]=b[2], b[12]=b[2], b[13]=b[2], b[14]=b[2], b[15]=b[2], out=o3);
        And16(a=a, b[0]=b[3], b[1]=b[3], b[2]=b[3], b[3]=b[3], b[4]=b[3], b[5]= b[3], b[6]=b[3], b[7]=b[3], b[8]=b[3], b[9]=b[3], b[10]=b[3], b[11]=b[3], b[12]=b[3], b[13]=b[3], b[14]=b[3], b[15]=b[3], out=o4);
        And16(a=a, b[0]=b[4], b[1]=b[4], b[2]=b[4], b[3]=b[4], b[4]=b[4], b[5]= b[4], b[6]=b[4], b[7]=b[4], b[8]=b[4], b[9]=b[4], b[10]=b[4], b[11]=b[4], b[12]=b[4], b[13]=b[4], b[14]=b[4], b[15]=b[4], out=o5);
        And16(a=a, b[0]=b[5], b[1]=b[5], b[2]=b[5], b[3]=b[5], b[4]=b[5], b[5]= b[5], b[6]=b[5], b[7]=b[5], b[8]=b[5], b[9]=b[5], b[10]=b[5], b[11]=b[5], b[12]=b[5], b[13]=b[5], b[14]=b[5], b[15]=b[5], out=o6);
        And16(a=a, b[0]=b[6], b[1]=b[6], b[2]=b[6], b[3]=b[6], b[4]=b[6], b[5]= b[6], b[6]=b[6], b[7]=b[6], b[8]=b[6], b[9]=b[6], b[10]=b[6], b[11]=b[6], b[12]=b[6], b[13]=b[6], b[14]=b[6], b[15]=b[6], out=o7);
        And16(a=a, b[0]=b[7], b[1]=b[7], b[2]=b[7], b[3]=b[7], b[4]=b[7], b[5]= b[7], b[6]=b[7], b[7]=b[7], b[8]=b[7], b[9]=b[7], b[10]=b[7], b[11]=b[7], b[12]=b[7], b[13]=b[7], b[14]=b[7], b[15]=b[7], out=o8);
        And16(a=a, b[0]=b[8], b[1]=b[8], b[2]=b[8], b[3]=b[8], b[4]=b[8], b[5]= b[8], b[6]=b[8], b[7]=b[8], b[8]=b[8], b[9]=b[8], b[10]=b[8], b[11]=b[8], b[12]=b[8], b[13]=b[8], b[14]=b[8], b[15]=b[8], out=o9);
        And16(a=a, b[0]=b[9], b[1]=b[9], b[2]=b[9], b[3]=b[9], b[4]=b[9], b[5]= b[9], b[6]=b[9], b[7]=b[9], b[8]=b[9], b[9]=b[9], b[10]=b[9], b[11]=b[9], b[12]=b[9], b[13]=b[9], b[14]=b[9], b[15]=b[9], out=o10);
        And16(a=a, b[0]=b[10], b[1]=b[10], b[2]=b[10], b[3]=b[10], b[4]=b[10], b[5]= b[10], b[6]=b[10], b[7]=b[10], b[8]=b[10], b[9]=b[10], b[10]=b[10], b[11]=b[10], b[12]=b[10], b[13]=b[10], b[14]=b[10], b[15]=b[10], out=o11);
        And16(a=a, b[0]=b[11], b[1]=b[11], b[2]=b[11], b[3]=b[11], b[4]=b[11], b[5]= b[11], b[6]=b[11], b[7]=b[11], b[8]=b[11], b[9]=b[11], b[10]=b[11], b[11]=b[11], b[12]=b[11], b[13]=b[11], b[14]=b[11], b[15]=b[11], out=o12);
        And16(a=a, b[0]=b[12], b[1]=b[12], b[2]=b[12], b[3]=b[12], b[4]=b[12], b[5]= b[12], b[6]=b[12], b[7]=b[12], b[8]=b[12], b[9]=b[12], b[10]=b[12], b[11]=b[12], b[12]=b[12], b[13]=b[12], b[14]=b[12], b[15]=b[12], out=o13);
        And16(a=a, b[0]=b[13], b[1]=b[13], b[2]=b[13], b[3]=b[13], b[4]=b[13], b[5]= b[13], b[6]=b[13], b[7]=b[13], b[8]=b[13], b[9]=b[13], b[10]=b[13], b[11]=b[13], b[12]=b[13], b[13]=b[13], b[14]=b[13], b[15]=b[13], out=o14);
        And16(a=a, b[0]=b[14], b[1]=b[14], b[2]=b[14], b[3]=b[14], b[4]=b[14], b[5]= b[14], b[6]=b[14], b[7]=b[14], b[8]=b[14], b[9]=b[14], b[10]=b[14], b[11]=b[14], b[12]=b[14], b[13]=b[14], b[14]=b[14], b[15]=b[14], out=o15);
        And16(a=a, b[0]=b[15], b[1]=b[15], b[2]=b[15], b[3]=b[15], b[4]=b[15], b[5]= b[15], b[6]=b[15], b[7]=b[15], b[8]=b[15], b[9]=b[15], b[10]=b[15], b[11]=b[15], b[12]=b[15], b[13]=b[15], b[14]=b[15], b[15]=b[15], out=o16);
        
        BitShiftL(in = o16, out=s16);
        Add16(a=o15, b=s16, out=out15);

        BitShiftL(in=out15, out=s15);
        Add16(a=o14, b=s15, out=out14);

        BitShiftL(in=out14, out=s14);
        Add16(a=o13, b=s14, out=out13);

        BitShiftL(in=out13, out=s13);
        Add16(a=o12, b=s13, out=out12);

        BitShiftL(in=out12, out=s12);
        Add16(a=o11, b=s12, out=out11);
         
        BitShiftL(in=out11, out=s11);
        Add16(a=o10, b=s11, out=out10);

        BitShiftL(in=out10, out=s10);
        Add16(a=o9, b=s10, out=out9);

        BitShiftL(in=out9, out=s9);
        Add16(a=o8, b=s9, out=out8);
        
        
        BitShiftL(in=out8, out=s8);
        Add16(a=o7, b=s8, out=out7);

        
        BitShiftL(in=out7, out=s7);
        Add16(a=o6, b=s7, out=out6);

        
        BitShiftL(in=out6, out=s6);
        Add16(a=o5, b=s6, out=out5);

        
        BitShiftL(in=out5, out=s5);
        Add16(a=o4, b=s5, out=out4);

        
        BitShiftL(in=out4, out=s4);
        Add16(a=o3, b=s4, out=out3);

        
        BitShiftL(in=out3, out=s3);
        Add16(a=o2, b=s3, out=out2);

        
        BitShiftL(in=out2, out=s2);
        Add16(a=o1, b=s2, out=out);
        }